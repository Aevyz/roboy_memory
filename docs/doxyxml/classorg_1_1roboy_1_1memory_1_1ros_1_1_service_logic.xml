<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classorg_1_1roboy_1_1memory_1_1ros_1_1_service_logic" kind="class" language="Java" prot="package">
    <compoundname>org::roboy::memory::ros::ServiceLogic</compoundname>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classorg_1_1roboy_1_1memory_1_1ros_1_1_service_logic_1aa740b580c4728b46aea8ba0001d5832c" prot="private" static="yes" mutable="no">
        <type>Gson</type>
        <definition>Gson org.roboy.memory.ros.ServiceLogic.parser</definition>
        <argsstring></argsstring>
        <name>parser</name>
        <initializer>= new Gson()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wagram/Roboy/roboy_memory/src/org/roboy/memory/ros/ServiceLogic.java" line="20" column="1" bodyfile="/Users/wagram/Roboy/roboy_memory/src/org/roboy/memory/ros/ServiceLogic.java" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="package-static-attrib">
      <memberdef kind="variable" id="classorg_1_1roboy_1_1memory_1_1ros_1_1_service_logic_1aef55514ea4c05fd6bc7bcffe3f6e1874" prot="package" static="yes" mutable="no">
        <type>ServiceResponseBuilder&lt; DataQueryRequest, DataQueryResponse &gt;</type>
        <definition>ServiceResponseBuilder&lt;DataQueryRequest, DataQueryResponse&gt; org.roboy.memory.ros.ServiceLogic.createServiceHandler</definition>
        <argsstring></argsstring>
        <name>createServiceHandler</name>
        <initializer>= (request, response) -&gt; {
        <ref refid="classorg_1_1roboy_1_1memory_1_1models_1_1_header" kindref="compound">Header</ref> header = parser.fromJson(request.getHeader(), Header.class);
        <ref refid="classorg_1_1roboy_1_1memory_1_1models_1_1_create" kindref="compound">Create</ref> create = parser.fromJson(request.getPayload(), Create.class);
        if (create.validate()) {
            response.setAnswer(<ref refid="classorg_1_1roboy_1_1memory_1_1util_1_1_neo4j_1ac21a5896f1e0438ae7e769858c05db4d" kindref="member">Neo4j.createNode</ref>(create));
        } else {
            response.setAnswer(create.getError());
        }
    }</initializer>
        <briefdescription>
<para>Create Service Handler. </para>        </briefdescription>
        <detaileddescription>
<para>Parses the header and payload into a create object with Gson and checks for invalid elements in the query. Calls createNode() method to query Neo4j and the answer is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wagram/Roboy/roboy_memory/src/org/roboy/memory/ros/ServiceLogic.java" line="27" column="1" bodyfile="/Users/wagram/Roboy/roboy_memory/src/org/roboy/memory/ros/ServiceLogic.java" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classorg_1_1roboy_1_1memory_1_1ros_1_1_service_logic_1adc0b3d19d82f44c620672db71b15ac70" prot="package" static="yes" mutable="no">
        <type>ServiceResponseBuilder&lt; DataQueryRequest, DataQueryResponse &gt;</type>
        <definition>ServiceResponseBuilder&lt;DataQueryRequest, DataQueryResponse&gt; org.roboy.memory.ros.ServiceLogic.updateServiceHandler</definition>
        <argsstring></argsstring>
        <name>updateServiceHandler</name>
        <initializer>= (request, response) -&gt; {
        <ref refid="classorg_1_1roboy_1_1memory_1_1models_1_1_header" kindref="compound">Header</ref> header = parser.fromJson(request.getHeader(), Header.class);
        <ref refid="classorg_1_1roboy_1_1memory_1_1models_1_1_update" kindref="compound">Update</ref> update = parser.fromJson(request.getPayload(), Update.class);

        if (update.validate()) {
            response.setAnswer(ok(<ref refid="classorg_1_1roboy_1_1memory_1_1util_1_1_neo4j_1a559d37963d9326d44f21124f6f58f821" kindref="member">Neo4j.updateNode</ref>(update)));
        } else {
            response.setAnswer(error(update.getError()));
        }
    }</initializer>
        <briefdescription>
<para>Update Service Handler. </para>        </briefdescription>
        <detaileddescription>
<para>Parses the header and payload into an update object with Gson and checks for invalid relationship types in the query. Calls updateNode() method to query Neo4j and the answer is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wagram/Roboy/roboy_memory/src/org/roboy/memory/ros/ServiceLogic.java" line="42" column="1" bodyfile="/Users/wagram/Roboy/roboy_memory/src/org/roboy/memory/ros/ServiceLogic.java" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classorg_1_1roboy_1_1memory_1_1ros_1_1_service_logic_1a3c4630babe95bb950e70826af7857675" prot="package" static="yes" mutable="no">
        <type>ServiceResponseBuilder&lt; DataQueryRequest, DataQueryResponse &gt;</type>
        <definition>ServiceResponseBuilder&lt;DataQueryRequest, DataQueryResponse&gt; org.roboy.memory.ros.ServiceLogic.getServiceHandler</definition>
        <argsstring></argsstring>
        <name>getServiceHandler</name>
        <initializer>= (request, response) -&gt; {
        <ref refid="classorg_1_1roboy_1_1memory_1_1models_1_1_header" kindref="compound">Header</ref> header = parser.fromJson(request.getHeader(), Header.class);
        <ref refid="classorg_1_1roboy_1_1memory_1_1models_1_1_get" kindref="compound">Get</ref> get = parser.fromJson(request.getPayload(), Get.class);
        if (get.getId() != null ) {
            response.setAnswer(<ref refid="classorg_1_1roboy_1_1memory_1_1util_1_1_neo4j_1aeefb00e53ce9ea3e36fa9fda25a98844" kindref="member">Neo4j.getNodeById</ref>(get.getId()));
        } else {
            response.setAnswer(Neo4j.getNode(get));
        }
    }</initializer>
        <briefdescription>
<para>Get Service Handler. </para>        </briefdescription>
        <detaileddescription>
<para>Parses the header and payload into a get object with Gson and checks whether node IDs or information about a node is queried. Calls getNodeById() or getNode() methods to query Neo4j and the answer is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wagram/Roboy/roboy_memory/src/org/roboy/memory/ros/ServiceLogic.java" line="58" column="1" bodyfile="/Users/wagram/Roboy/roboy_memory/src/org/roboy/memory/ros/ServiceLogic.java" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classorg_1_1roboy_1_1memory_1_1ros_1_1_service_logic_1a7cdf3eccc57c570df4d51a35ac6ace76" prot="package" static="yes" mutable="no">
        <type>ServiceResponseBuilder&lt; DataQueryRequest, DataQueryResponse &gt;</type>
        <definition>ServiceResponseBuilder&lt;DataQueryRequest, DataQueryResponse&gt; org.roboy.memory.ros.ServiceLogic.cypherServiceHandler</definition>
        <argsstring></argsstring>
        <name>cypherServiceHandler</name>
        <initializer>= (request, response) -&gt; {
        <ref refid="classorg_1_1roboy_1_1memory_1_1models_1_1_header" kindref="compound">Header</ref> header = parser.fromJson(request.getHeader(), Header.class);

        response.setAnswer(<ref refid="classorg_1_1roboy_1_1memory_1_1util_1_1_neo4j_1a71e7ebbb084525eb661c178b2d3e2320" kindref="member">Neo4j.run</ref>(request.getPayload()));
    }</initializer>
        <briefdescription>
<para>Cypher Service Handler. </para>        </briefdescription>
        <detaileddescription>
<para>Directly runs a plain Cypher query which is contained in the payload and returns the response. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wagram/Roboy/roboy_memory/src/org/roboy/memory/ros/ServiceLogic.java" line="72" column="1" bodyfile="/Users/wagram/Roboy/roboy_memory/src/org/roboy/memory/ros/ServiceLogic.java" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classorg_1_1roboy_1_1memory_1_1ros_1_1_service_logic_1a559e6e72848711056723579defbaa3ea" prot="package" static="yes" mutable="no">
        <type>ServiceResponseBuilder&lt; DataQueryRequest, DataQueryResponse &gt;</type>
        <definition>ServiceResponseBuilder&lt;DataQueryRequest, DataQueryResponse&gt; org.roboy.memory.ros.ServiceLogic.removeServiceHandler</definition>
        <argsstring></argsstring>
        <name>removeServiceHandler</name>
        <initializer>= (request, response) -&gt; {
        <ref refid="classorg_1_1roboy_1_1memory_1_1models_1_1_header" kindref="compound">Header</ref> header = parser.fromJson(request.getHeader(), Header.class);
        <ref refid="classorg_1_1roboy_1_1memory_1_1models_1_1_remove" kindref="compound">Remove</ref> remove = parser.fromJson(request.getPayload(), Remove.class);

        if (remove.validate()) {
            response.setAnswer(ok(<ref refid="classorg_1_1roboy_1_1memory_1_1util_1_1_neo4j_1ac4cc5eb8a2aa28691cad3cbec317ad6b" kindref="member">Neo4j.remove</ref>(remove)));
        } else {
            response.setAnswer(error(remove.getError()));
        }
    }</initializer>
        <briefdescription>
<para>Remove Service Handler. </para>        </briefdescription>
        <detaileddescription>
<para>Parses the header and payload into a remove object. Calls remove() method to query Neo4j and the answer is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/wagram/Roboy/roboy_memory/src/org/roboy/memory/ros/ServiceLogic.java" line="83" column="1" bodyfile="/Users/wagram/Roboy/roboy_memory/src/org/roboy/memory/ros/ServiceLogic.java" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains service handlers to talk with ROS. </para>    </briefdescription>
    <detaileddescription>
<para>They parse the header and payload and check for invalid elements in the query. Then the functions to construct the cypher queries are excecuted and the answer returned. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="76">
        <label>ServiceResponseBuilder&lt; DataQueryRequest, DataQueryResponse &gt;</label>
      </node>
      <node id="77">
        <label>Gson</label>
      </node>
      <node id="75">
        <label>org.roboy.memory.ros.ServiceLogic</label>
        <link refid="classorg_1_1roboy_1_1memory_1_1ros_1_1_service_logic"/>
        <childnode refid="76" relation="usage">
          <edgelabel>updateServiceHandler</edgelabel>
          <edgelabel>createServiceHandler</edgelabel>
          <edgelabel>removeServiceHandler</edgelabel>
          <edgelabel>cypherServiceHandler</edgelabel>
          <edgelabel>getServiceHandler</edgelabel>
        </childnode>
        <childnode refid="77" relation="usage">
          <edgelabel>parser</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/wagram/Roboy/roboy_memory/src/org/roboy/memory/ros/ServiceLogic.java" line="18" column="1" bodyfile="/Users/wagram/Roboy/roboy_memory/src/org/roboy/memory/ros/ServiceLogic.java" bodystart="18" bodyend="94"/>
    <listofallmembers>
      <member refid="classorg_1_1roboy_1_1memory_1_1ros_1_1_service_logic_1aef55514ea4c05fd6bc7bcffe3f6e1874" prot="package" virt="non-virtual"><scope>org::roboy::memory::ros::ServiceLogic</scope><name>createServiceHandler</name></member>
      <member refid="classorg_1_1roboy_1_1memory_1_1ros_1_1_service_logic_1a7cdf3eccc57c570df4d51a35ac6ace76" prot="package" virt="non-virtual"><scope>org::roboy::memory::ros::ServiceLogic</scope><name>cypherServiceHandler</name></member>
      <member refid="classorg_1_1roboy_1_1memory_1_1ros_1_1_service_logic_1a3c4630babe95bb950e70826af7857675" prot="package" virt="non-virtual"><scope>org::roboy::memory::ros::ServiceLogic</scope><name>getServiceHandler</name></member>
      <member refid="classorg_1_1roboy_1_1memory_1_1ros_1_1_service_logic_1aa740b580c4728b46aea8ba0001d5832c" prot="private" virt="non-virtual"><scope>org::roboy::memory::ros::ServiceLogic</scope><name>parser</name></member>
      <member refid="classorg_1_1roboy_1_1memory_1_1ros_1_1_service_logic_1a559e6e72848711056723579defbaa3ea" prot="package" virt="non-virtual"><scope>org::roboy::memory::ros::ServiceLogic</scope><name>removeServiceHandler</name></member>
      <member refid="classorg_1_1roboy_1_1memory_1_1ros_1_1_service_logic_1adc0b3d19d82f44c620672db71b15ac70" prot="package" virt="non-virtual"><scope>org::roboy::memory::ros::ServiceLogic</scope><name>updateServiceHandler</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
